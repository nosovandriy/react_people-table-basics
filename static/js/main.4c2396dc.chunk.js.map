{"version":3,"sources":["api.ts","types/ErrorType.ts","components/PersonLink/PersonLink.tsx","components/PersonList/PersonList.tsx","components/Loader/Loader.tsx","utils/groupedPeopleData.tsx","components/PeopleTable/PeopleTable.tsx","components/PageNavLink/PageNavLink.tsx","components/MainNav/MainNav.tsx","App.tsx","index.tsx"],"names":["getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","ErrorType","PersonLink","to","name","sex","className","classNames","PersonList","person","isSelected","selectedPerson","slug","born","died","mother","motherName","father","fatherName","Loader","groupedPeopleData","people","map","find","woman","man","PeopleTable","useParams","personId","useState","dataPeople","setDataPeople","isLoading","setIsLoading","none","errorType","setErrorType","loadDataFromServer","dataFromServer","length","emptyData","loadingData","useEffect","PageNavLink","text","isActive","MainNav","role","App","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.4c2396dc.chunk.js","sourcesContent":["import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","export enum ErrorType {\n  none,\n  loadingData,\n  emptyData,\n}\n","import { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\ntype Props = {\n  to: string;\n  name: string | null;\n  sex?: string;\n};\n\nexport const PersonLink: React.FC<Props> = ({ to, name, sex }) => (\n  <Link\n    to={`/people/${to}`}\n    className={classNames({\n      'has-text-danger': (sex === 'f'),\n    })}\n  >\n    {name}\n  </Link>\n);\n","import classNames from 'classnames';\nimport { Person } from '../../types/Person';\nimport { PersonLink } from '../PersonLink';\n\ntype Props = {\n  person: Person,\n  selectedPerson: string,\n};\n\nexport const PersonList: React.FC<Props> = ({\n  person,\n  selectedPerson,\n}) => {\n  const isSelected = selectedPerson === person.slug;\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames({\n        'has-background-warning': isSelected,\n      })}\n    >\n      <td>\n        <PersonLink\n          to={person.slug}\n          name={person.name}\n          sex={person.sex}\n        />\n      </td>\n\n      <td>{person.sex}</td>\n      <td>{person.born}</td>\n      <td>{person.died}</td>\n      <td>\n        {person.mother\n          ? (\n            <PersonLink\n              to={person.mother?.slug}\n              name={person.motherName}\n              sex={person.mother.sex}\n            />\n          ) : (\n            person.motherName || '-'\n          )}\n      </td>\n      <td>\n        {person.father\n          ? (\n            <PersonLink\n              to={person.father?.slug}\n              name={person.fatherName}\n              sex={person.father.sex}\n            />\n          ) : (\n            person.fatherName || '-'\n          )}\n      </td>\n    </tr>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from '../types/Person';\n\nexport const groupedPeopleData = (people: Person[]) => (\n  people.map((person) => (\n    {\n      ...person,\n      mother: people.find(woman => woman.name === person.motherName),\n      father: people.find(man => man.name === person.fatherName),\n    }\n  )));\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getPeople } from '../../api';\nimport { PersonList } from '../PersonList';\nimport { Loader } from '../Loader';\n\nimport { ErrorType } from '../../types/ErrorType';\nimport { Person } from '../../types/Person';\nimport { groupedPeopleData } from '../../utils/groupedPeopleData';\n\nexport const PeopleTable = () => {\n  const { personId = 'no selected' } = useParams();\n\n  const [dataPeople, setDataPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [errorType, setErrorType] = useState<ErrorType>(ErrorType.none);\n\n  const loadDataFromServer = async () => {\n    try {\n      const dataFromServer = await getPeople();\n\n      if (!dataFromServer.length) {\n        setErrorType(ErrorType.emptyData);\n      }\n\n      setDataPeople(groupedPeopleData(dataFromServer));\n    } catch (error) {\n      setErrorType(ErrorType.loadingData);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadDataFromServer();\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {isLoading && <Loader />}\n          {!isLoading && (\n            <table\n              data-cy=\"peopleTable\"\n              className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n            >\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>Sex</th>\n                  <th>Born</th>\n                  <th>Died</th>\n                  <th>Mother</th>\n                  <th>Father</th>\n                </tr>\n              </thead>\n\n              <tbody>\n                {dataPeople.map(person => (\n                  <PersonList\n                    person={person}\n                    key={person.slug}\n                    selectedPerson={personId}\n                  />\n                ))}\n              </tbody>\n            </table>\n          )}\n          {errorType === ErrorType.loadingData && (\n            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n              Something went wrong\n            </p>\n          )}\n\n          {errorType === ErrorType.emptyData && (\n            <p data-cy=\"noPeopleMessage\">\n              There are no people on the server\n            </p>\n          )}\n\n        </div>\n      </div>\n    </>\n  );\n};\n","import { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\n\ntype Props = {\n  to: string;\n  text: string;\n};\n\nexport const PageNavLink: React.FC<Props> = ({ to, text }) => (\n  <NavLink\n    to={to}\n    className={({ isActive }) => classNames(\n      'navbar-item', { 'has-background-grey-lighter': isActive },\n    )}\n  >\n    {text}\n  </NavLink>\n);\n","import { PageNavLink } from '../PageNavLink';\n\nexport const MainNav = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <PageNavLink to=\"/\" text=\"Home\" />\n          <PageNavLink to=\"people\" text=\"People\" />\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import {\n  Routes,\n  Route,\n  Navigate,\n} from 'react-router-dom';\n\nimport { PeopleTable } from './components/PeopleTable';\nimport { MainNav } from './components/MainNav';\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <MainNav />\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route\n              path=\"/\"\n              element={<h1 className=\"title\">Home Page</h1>}\n            />\n            <Route\n              path=\"home\"\n              element={<Navigate to=\"/\" replace />}\n            />\n            <Route path=\"people\">\n              <Route\n                index\n                element={<PeopleTable />}\n              />\n              <Route\n                path=\":personId\"\n                element={<PeopleTable />}\n              />\n            </Route>\n\n            <Route\n              path=\"*\"\n              element={<h1 className=\"title\">Page not found</h1>}\n            />\n          </Routes>\n        </div>\n      </main>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}